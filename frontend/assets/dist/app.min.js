angular.module("app",["ngRoute","uiGmapgoogle-maps","highcharts-ng"]),function(){"use strict";function e(e){e.startSymbol("{_"),e.endSymbol("_}")}e.$inject=["$interpolateProvider"],angular.module("app").config(e)}(),function(){return angular.module("app").constant("ENV_VARS",{apiUrl:"http://127.0.0.1:8000/api/v1/reports/",apiToken:"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE0Nzc2NTA1NjUsInVzZXJuYW1lIjoibGVvIiwiZW1haWwiOiJsZW9AbGVvLmNvbSIsInVzZXJfaWQiOjF9.hfEIccwRvmxzI16mc9K21Sf_PMIoRPqaRnKHkfsPb6Y"})}(),function(){"use strict";function e(e,t){e.defaults.headers.common.Authorization="JWT "+t.apiToken}angular.module("app").run(e),e.$inject=["$http","ENV_VARS"]}(),function(){"use strict";function e(e,t,o,r){function n(){return a().then(function(e){s()})}function a(){return e.getReports().then(function(e){return angular.forEach(e,function(e){switch(e.status){case 1:l.reports.sentReports.push({location:new google.maps.LatLng(e.latitude,e.longitude),weight:40});break;case 2:l.reports.notResolvedReports.push({location:new google.maps.LatLng(e.latitude,e.longitude),weight:100});break;case 3:case 4:l.reports.resolvedReports.push({location:new google.maps.LatLng(e.latitude,e.longitude)});break;case 5:l.reports.transferredReports.push({location:new google.maps.LatLng(e.latitude,e.longitude)})}}),e})}function s(){var t=l.reports.notResolvedReports.length+l.reports.resolvedReports.length+l.reports.sentReports.length+l.reports.transferredReports.length,o=e.calculatePercentage([l.reports.sentReports.length,l.reports.notResolvedReports.length,l.reports.resolvedReports.length,l.reports.transferredReports.length],t);l.reportsChartConfig.series[0].data=[{name:"Enviadas",num_reports:l.reports.sentReports.length,y:o[0],color:"#EEEEEE"},{name:"Em análise",num_reports:l.reports.notResolvedReports.length,y:o[1],color:"#7F2B11"},{name:"Resolvidas",num_reports:l.reports.resolvedReports.length,y:o[2],color:"#FF5722"},{name:"Transferidas",num_reports:l.reports.transferredReports.length,y:o[3],color:"#FF9115"}]}function i(e){var t=l.reports.sentReports.concat(l.reports.notResolvedReports),o=["rgba(229, 153, 0, 0)","rgba(231, 141, 0, 1)","rgba(233, 130, 1, 1)","rgba(235, 118, 2, 1)","rgba(237, 107, 3, 1)","rgba(239, 96, 4, 1)","rgba(241, 84, 5, 1)","rgba(243, 73, 5, 1)","rgba(245, 61, 6, 1)","rgba(247, 50, 6, 1)","rgba(249, 39, 7, 1)","rgba(251, 27, 8, 1)","rgba(253, 16, 9, 1)","rgba(255, 5, 10, 1)"];e.set("gradient",e.get("gradient")?null:o),e.set("radius",20),e.set("opacity",.7),r.promise().then(function(o){var r=(o[0].map,new google.maps.MVCArray(t));e.setData(r)})}var l=this;l.title="HomeController",l.reports={sentReports:[],notResolvedReports:[],resolvedReports:[],transferredReports:[]},l.map={center:{latitude:-19.73639,longitude:-45.25222},zoom:14,options:{mapTypeControl:!1,mapScaleControl:!1,streetViewControl:!1,maxZoom:15,minZoom:14,scrollwheel:!1},showHeat:!1,heatLayerCallback:function(e){new i(e)}},l.reportsChartConfig={options:{chart:{type:"pie"},tooltip:{pointFormat:"{series.name}: <b> {point.num_reports} </b> <br/><b>{point.percentage:.2f}%</b> "},plotOptions:{pie:{cursor:"pointer",dataLabels:{enabled:!0,format:"<b>{point.name}</b>: {point.percentage:.2f} %"},allowPointSelect:!1,showInLegend:!0,point:{events:{legendItemClick:function(e){e.preventDefault()}}}}}},series:[{name:"Nº de Denúncias",colorByPoint:!0,data:[]}],title:{text:"Histórico Atual de Denúncias de Criadouros do Aedes Aegypti da Cidade Bom Despacho"}},n(),o.then(function(e){l.map.showHeat=!0})}angular.module("app").controller("HomeController",e),e.$inject=["dataService","$timeout","uiGmapGoogleMapApi","uiGmapIsReady"]}(),function(){"use strict";function e(e){e.when("/",{templateUrl:"base.html",controller:"HomeController",controllerAs:"vm"})}e.$inject=["$routeProvider"],angular.module("app").config(e)}(),function(){"use strict";function e(e,t){function o(){function o(e){return e.data}function r(e){console.log(e)}return e.get(t.apiUrl).then(o).catch(r)}function r(e,t){var o=[];return angular.forEach(e,function(e){var r=e/t*100;o.push(r)}),o}var n={getReports:o,calculatePercentage:r};return n}angular.module("app").factory("dataService",e),e.$inject=["$http","ENV_VARS"]}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
